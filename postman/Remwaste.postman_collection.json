{
	"info": {
		"_postman_id": "302e9246-7dd9-4886-9b6b-e045fa3d3a2a",
		"name": "Remwaste",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30467377"
	},
	"item": [
		{
			"name": "Login Tests",
			"item": [
				{
					"name": "Invalid login",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"john_doe\",\n    \"password\": \"pass123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://fakestoreapi.com/auth/login",
							"protocol": "https",
							"host": [
								"fakestoreapi",
								"com"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid Login- POST /login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"// Check that the response body contains a token",
									"pm.expect(response).to.have.property('token');",
									"pm.expect(response.token).to.be.a('string');",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"mor_2314\",\n    \"password\": \"83r5^_\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://fakestoreapi.com/auth/login",
							"protocol": "https",
							"host": [
								"fakestoreapi",
								"com"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Item Tests",
			"item": [
				{
					"name": "Create a product- POST /items",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"title\": \"New Product\", \"price\": 29.99}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://fakestoreapi.com/products",
							"protocol": "https",
							"host": [
								"fakestoreapi",
								"com"
							],
							"path": [
								"products"
							]
						},
						"description": "Generated from cURL: curl -X POST 'https://fakestoreapi.com/products' -H 'Content-Type: application/json' -d '{\"title\": \"New Product\", \"price\": 29.99}'"
					},
					"response": []
				},
				{
					"name": "Delete an Item- DELETE /items/:id",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://fakestoreapi.com/products/1",
							"protocol": "https",
							"host": [
								"fakestoreapi",
								"com"
							],
							"path": [
								"products",
								"1"
							]
						},
						"description": "Generated from cURL: curl -X DELETE 'https://fakestoreapi.com/products/1'"
					},
					"response": []
				},
				{
					"name": "Get a product by ID- GET /items",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://fakestoreapi.com/products/1",
							"protocol": "https",
							"host": [
								"fakestoreapi",
								"com"
							],
							"path": [
								"products",
								"1"
							]
						},
						"description": "Generated from cURL: curl -X GET 'https://fakestoreapi.com/products/1'"
					},
					"response": []
				},
				{
					"name": "Get All items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the schema of each product object\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach(product => {",
									"        pm.expect(product).to.be.an('object');",
									"        pm.expect(product).to.have.all.keys('id', 'title', 'price', 'description', 'category', 'image', 'rating');",
									"        pm.expect(product.id).to.be.a('number');",
									"        pm.expect(product.title).to.be.a('string');",
									"        pm.expect(product.price).to.be.a('number');",
									"        pm.expect(product.description).to.be.a('string');",
									"        pm.expect(product.category).to.be.a('string');",
									"        pm.expect(product.image).to.be.a('string');",
									"        ",
									"        pm.expect(product.rating).to.be.an('object');",
									"        pm.expect(product.rating).to.have.all.keys('rate', 'count');",
									"        pm.expect(product.rating.rate).to.be.a('number');",
									"        pm.expect(product.rating.count).to.be.a('number');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Price is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(product => {",
									"        pm.expect(product.price).to.be.a('number').and.to.be.at.least(0, \"Price should be a non-negative number\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://fakestoreapi.com/products",
							"protocol": "https",
							"host": [
								"fakestoreapi",
								"com"
							],
							"path": [
								"products"
							]
						},
						"description": "Generated from cURL: curl -X GET 'https://fakestoreapi.com/products'"
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://fakestoreapi.com",
			"type": "default"
		},
		{
			"key": "baseUrl",
			"value": ""
		},
		{
			"key": "productId",
			"value": ""
		}
	]
}